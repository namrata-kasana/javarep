// Step 1: Define the Connection Interface
interface Connection {
    void setListener();
    void setTopic();
    void start();
}

// Step 2: Implement TibcoConnection
class TibcoConnection implements Connection {
    private String url;
    private String user;
    private String password;

    public TibcoConnection(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;
    }

    @Override
    public void setListener() {
        System.out.println("Setting up Tibco listener...");
    }

    @Override
    public void setTopic() { /* Not applicable for Tibco */ }

    @Override
    public void start() {
        System.out.println("Starting Tibco connection...");
    }
}

// Step 3: Implement JndiConnection
class JndiConnection implements Connection {
    private String jndiUrl;
    private String lookup;
    private String password;

    public JndiConnection(String jndiUrl, String lookup, String password) {
        this.jndiUrl = jndiUrl;
        this.lookup = lookup;
        this.password = password;
    }

    @Override
    public void setListener() { /* Not applicable for JNDI */ }

    @Override
    public void setTopic() {
        System.out.println("Setting up JNDI topic...");
    }

    @Override
    public void start() {
        System.out.println("Starting JNDI connection...");
    }
}

// Step 4: Define the Connection Factory
interface ConnectionFactory {
    Connection createConnection(String... params);
}

// Step 5: Implement Tibco Connection Factory
class TibcoConnectionFactory implements ConnectionFactory {
    @Override
    public Connection createConnection(String... params) {
        return new TibcoConnection(params[0], params[1], params[2]); // url, user, password
    }
}

// Step 6: Implement JNDI Connection Factory
class JndiConnectionFactory implements ConnectionFactory {
    @Override
    public Connection createConnection(String... params) {
        return new JndiConnection(params[0], params[1], params[2]); // jndiUrl, lookup, password
    }
}

// Step 7: Factory Provider to return the correct factory
class FactoryProvider {
    public static ConnectionFactory getFactory(String type) {
        if ("tibco".equalsIgnoreCase(type)) {
            return new TibcoConnectionFactory();
        } else if ("jndi".equalsIgnoreCase(type)) {
            return new JndiConnectionFactory();
        }
        throw new IllegalArgumentException("Unknown factory type: " + type);
    }
}

// Step 8: Define OpenConnection Interface
interface OpenConnection {
    void open(Connection connection);
}

// Step 9: Implement OpenTibcoConnection
class OpenTibcoConnection implements OpenConnection {
    @Override
    public void open(Connection connection) {
        connection.setListener();
        connection.start();
    }
}

// Step 10: Implement OpenJndiConnection
class OpenJndiConnection implements OpenConnection {
    @Override
    public void open(Connection connection) {
        connection.setTopic();
        connection.start();
    }
}

// Step 11: Create Factory for OpenConnection
class OpenConnectionFactory {
    public static OpenConnection getOpenConnection(String type) {
        if ("tibco".equalsIgnoreCase(type)) {
            return new OpenTibcoConnection();
        } else if ("jndi".equalsIgnoreCase(type)) {
            return new OpenJndiConnection();
        }
        throw new IllegalArgumentException("Unknown connection type: " + type);
    }
}

// Step 12: ABC class that uses both factories
class ABC {
    public void openconn1(String url, String user, String password) {
        ConnectionFactory factory = FactoryProvider.getFactory("tibco");
        Connection conn = factory.createConnection(url, user, password);
        OpenConnection openConn = OpenConnectionFactory.getOpenConnection("tibco");
        openConn.open(conn);
    }

    public void openconn2(String jndiUrl, String lookup, String password) {
        ConnectionFactory factory = FactoryProvider.getFactory("jndi");
        Connection conn = factory.createConnection(jndiUrl, lookup, password);
        OpenConnection openConn = OpenConnectionFactory.getOpenConnection("jndi");
        openConn.open(conn);
    }
}

// Step 13: Main class to test the implementation
public class FactoryPatternExample {
    public static void main(String[] args) {
        ABC abc = new ABC();

        System.out.println("Opening Tibco Connection:");
        abc.openconn1("tibco-url", "admin", "pass123");

        System.out.println("\nOpening JNDI Connection:");
        abc.openconn2("jndi-url", "jndi-lookup", "jndiPass");
    }
}
